#include <iostream>
#include <vector>
#include <algorithm>

class StockTrader {
public:
    StockTrader() {
        n = 0;
    }

    int maxProfit(std::vector<int>& prices) {
        n = prices.size();
        if (n <= 1) {
            return 0;
        }
        leftProfit.resize(n);
        rightProfit.resize(n);
        int leftMin = prices[0];
        for (int i = 1; i < n; i++) {
            leftMin = std::min(leftMin, prices[i]);
            leftProfit[i] = std::max(leftProfit[i-1], prices[i]-leftMin);
        }
        int rightMax = prices[n-1];
        for (int i = n-2; i >= 0; i--) {
            rightMax = std::max(rightMax, prices[i]);
            rightProfit[i] = std::max(rightProfit[i+1], rightMax-prices[i]);
        }
        int maxProfit = 0;
        for (int i = 0; i < n; i++) {
            maxProfit = std::max(maxProfit, leftProfit[i]+rightProfit[i]);
        }
        return maxProfit;
    }

private:
    int n;
    std::vector<int> leftProfit;
    std::vector<int> rightProfit;
};

int main() {
    // example usage
    std::vector<int> prices1 = {3,3,5,0,0,3,1,4};
    std::vector<int> prices2 = {1,2,3,4,5};
    std::vector<int> prices3 = {7,6,4,3,1};
    StockTrader trader;
    std::cout << trader.maxProfit(prices1) << std::endl; // expected output: 6
    std::cout << trader.maxProfit(prices2) << std::endl; // expected output: 4
    std::cout << trader.maxProfit(prices3) << std::endl; // expected output: 0
    return 0;
}
